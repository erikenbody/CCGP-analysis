suppressMessages(library(tidyverse))
suppressMessages(library(raster))
suppressMessages(library(vegan))
suppressMessages(library(qvalue))
suppressMessages(library(peakRAM))
suppressMessages(library(here))
suppressMessages(library(devtools))

# example call: `Rscript RDA_cloud.R "59-Ursus" "~/../../media/WangLab/WangLab/CCGP_raw_data/" "outputs/RDA/" FALSE FALSE "structure" 1:5 FALSE FALSE 3 "best" 0.01 3 0.05 1000 TRUE "fdr"`

#!/usr/bin/env Rscript # leave line commented
species = snakemake@params[[1]]
data_path = snakemake@params[[2]]
output_path = snakemake@params[[3]]
rmislands = snakemake@params[[4]]
pruned = snakemake@params[[5]]
impute = snakemake@params[[6]]
kvals = snakemake@params[[7]]
correctGEO = snakemake@params[[8]]
correctPC = snakemake@params[[9]]
nPC = snakemake@params[[10]]
model = snakemake@params[[11]]
sig = snakemake@params[[12]] # only for outlier_method = "p"
z = snakemake@params[[13]]# only for outlier_method = "z"
Pin = snakemake@params[[14]]
R2permutations = snakemake@params[[15]]
R2scope = snakemake@params[[16]]
p_adj = snakemake@params[[17]] # only if outlier_method = "p"

# Exported files are as follows:
#     (1) species_imputed_`impute`.txt
#     (2) species_RDA_anova_`model`.csv
#     (3) species_RDA_cortest_`model`.csv
#     (4) species_RDA_outliers_`model`_rdadapt.csv
#     (5) species_RDA_outliers_`model`_Zscores.csv
#     (6) species_RDA_Rsquared_`model`.csv
#     (7) species_RDA_varpart_`model`.csv

devtools::install_github("TheWangLab/algatr")
suppressMessages(library(algatr))

#need to interpret the kvals string as an expression
kvals <- try(eval(parse(text = kvals)), silent = TRUE)
#kvals <- 1:3
#similar problem with logical true/false
if (rmislands == "true") {
  rmislands <- TRUE
} else if (rmislands == "false") {
  rmislands <- FALSE
} else {
  stop("Invalid logical value provided as an argument. Please use 'True' or 'False'.")
}

if (pruned == "true") {
  pruned <- TRUE
} else if (pruned == "false") {
  pruned <- FALSE
} else {
  stop("Invalid logical value provided as an argument. Please use 'True' or 'False'.")
}

if (R2scope == "true") {
  R2scope <- TRUE
} else if (R2scope == "false") {
  R2scope <- FALSE
} else {
  stop("Invalid logical value provided as an argument. Please use 'True' or 'False'.")
}

if (correctGEO == "true") {
  correctGEO <- TRUE
} else if (correctGEO == "false") {
  correctGEO <- FALSE
} else {
  stop("Invalid logical value provided as an argument. Please use 'True' or 'False'.")
}

if (correctPC == "true") {
  correctPC <- TRUE
} else if (correctPC == "false") {
  correctPC <- FALSE
} else {
  stop("Invalid logical value provided as an argument. Please use 'True' or 'False'.")
}

source(paste0(snakemake@scriptdir, "/general_functions.R"))


# Import and process data -------------------------------------------------

load_algatr_example()

dat <- get_input_objects(species = species, 
                             data_path = data_path,
                             analysis = "vcf",
                             pruned = pruned,
                             impute = impute,
                             kvals = kvals,
                             rmislands = rmislands)

# Run RDA -----------------------------------------------------------------

results_z <- algatr::rda_do_everything(dat$gen,
                                       dat$envlayers, 
                                       dat$coords,
                                       model = model,
                                       correctGEO = correctGEO,
                                       correctPC = correctPC,
                                       nPC = nPC,
                                       varpart = TRUE,
                                       outlier_method = "z",
                                       z = z,
                                       Pin = Pin,
                                       R2permutations = R2permutations,
                                       R2scope = R2scope,
                                       quiet = TRUE)

results_p <- algatr::rda_do_everything(dat$gen,
                                       dat$envlayers, 
                                       dat$coords,
                                       model = model,
                                       correctGEO = correctGEO,
                                       correctPC = correctPC,
                                       nPC = nPC,
                                       varpart = TRUE,
                                       outlier_method = "p",
                                       sig = sig,
                                       p_adj = p_adj,
                                       Pin = Pin,
                                       R2permutations = R2permutations,
                                       R2scope = R2scope,
                                       quiet = TRUE)

# Export results ----------------------------------------------------------

export_rda <- function(results_p, results_z) {
  outlier_helper <- function(df, outlier) {dat <- df %>% dplyr::mutate(outlier_method = outlier)}
  
  if (!is.null(results_p$cor_test)) {
    cor_test <- rbind(outlier_helper(results_p$cor_df, outlier = "p"), 
                      outlier_helper(results_z$cor_df, outlier = "z"))
    readr::write_csv(cor_test, file = paste0(output_path, species, "_RDA_cortest_", model, ".csv"),
                     col_names = TRUE)
  }
  
  if (!is.null(results_p$varpart)) {
    varpart <- rbind(outlier_helper(results_p$varpart, outlier = "p"), 
                     outlier_helper(results_z$varpart, outlier = "z"))
    readr::write_csv(varpart,
                     file = paste0(output_path, species, "_RDA_varpart_", model, ".csv"),
                     col_names = TRUE)
  }
  
  anova <- rbind(outlier_helper(results_p$anova, outlier = "p"), 
                 outlier_helper(results_z$anova, outlier = "z"))
  readr::write_csv(anova,
                   file = paste0(output_path, species, "_RDA_anova_", model, ".csv"),
                   col_names = TRUE)
  
  rsq <- rbind(outlier_helper(as.data.frame(results_p$rsq), outlier = "p"), 
               outlier_helper(as.data.frame(results_z$rsq), outlier = "z"))
  readr::write_csv(rsq,
                   file = paste0(output_path, species, "_RDA_Rsquared_", model, ".csv"),
                   col_names = TRUE)
  
  snps <- results_p$rda_outlier_test$rdadapt %>% 
    dplyr::mutate(locus = colnames(dat$gen))
  readr::write_csv(snps,
                   file = paste0(output_path, species, "_RDA_outliers_", model, "_rdadapt.csv"),
                   col_names = TRUE)
  
  readr::write_csv(results_z$rda_outlier_test,
                   file = paste0(output_path, species, "_RDA_outliers_", model, "_Zscores.csv"),
                   col_names = TRUE)
  
  write.table(dat$gen, file = paste0(output_path, species, "_imputed_", impute, ".txt"),
              sep = " ", row.names = FALSE, col.names = TRUE, quote = FALSE)
}

# Export results for each outlier detection method
export_rda(results_p, results_z)
